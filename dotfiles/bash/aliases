# TIPS
# ----
# !79                  > rerun the command 79 in the history
# !echo                > rerun the last command with 'echo' in the history
# ^r ^g                > do a reverse search, then cancel
# mv README{.txt,.doc} > change extension without retyping the name

# SHELL
# -----
alias  u='cd .. && l'
alias  l='pwd && ls -Glap'
alias ls='ls -Gp'
alias  h='history'
alias md='mkdir -p'
alias cx='chmod +x'
alias rf='rm -rf'
alias dh='du -hd 0' # current folder size
alias ...='../..'
alias  v='vim'
function pair {
  if [ $1 ]; then
    session=$1
  else
    session=pair
  fi
  tmux -S /tmp/pair new-session -s $session -d
  tmux -S /tmp/pair send-keys -t $session 'chmod 777 /tmp/pair' C-m
  tmux -S /tmp/pair attach -t $session
}

# DOTFILES
# --------
alias sb='source ~/.bashrc'
alias reload='source ~/bin/dotfiles/bash/aliases'
alias ea='$EDITOR ~/bin/dotfiles/bash/aliases && reload'
alias ee='$EDITOR ~/bin/dotfiles/bash/env'
alias ec='$EDITOR ~/bin/dotfiles/bash/config'
alias ep='$EDITOR package.json'

# GIT
# ---
alias  gs='git status'
alias  gd='git diff'
alias gds='git diff --staged'
alias gdh='git diff HEAD HEAD~'
alias  ga='git add'
alias gaa='git add .'
alias  gb="git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"
alias  gl='git log'
alias gl-='git log --follow --'
alias glf='git log --pretty=full'
alias glm='git log --pretty=full --author `git config user.name`'
alias  gh='git log --pretty=format:"%Cred%h%Creset %ad | %Cgreen%s%Creset%C(yellow)%d%Creset [%an]" --graph --date=short --all'
alias ghm='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'
alias  gu='git pull'
alias  gv='git mv'
alias gcl='git clone'
alias gli='git update-index --assume-unchanged' # locally ignore changes
alias glu='git update-index --no-assume-unchanged' # stop ignoring changes
alias  gc='git commit'
alias  gco='git checkout'
alias gcp='git cherry-pick'
alias gbr='git branch -r'
alias  gm='git merge'
alias gmf='git merge --no-ff'
alias gmm='git merge master'
alias  gp='git push'
alias  gt='git stash'
alias gta='git stash apply'
alias gam='git commit --amend' # include new changes in the last commit
alias grh='git reset HEAD'
alias grhh='git reset --hard HEAD'
alias  gla='git shortlog -ns' # Summary by author
alias  gbn="git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'" # current branch name
function gra() { # git remote add and fetch from another GitHub user
  git remote add -f $1 git://github.com/$1/`basename $PWD`.git
}
function grd() { # git restore deleted file
  git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"
}
function gbt() { # git checkout and track remote branch
  git checkout -t -b $1 origin/$1
}
function gsu() { # git track the remote branch with the same name as the current
  git branch --set-upstream $(gbn) origin/$(gbn)  
}
function gg() { # git commit that reads the message from the same line
  git add . 
  git commit -v -a -m "$*"
}
function gsh() { # shortens a Github URL
  curl -i http://git.io -F "url=$1"
}

alias ungit="find . -name '.git' -exec rm -rf {} \;"

# GIT AUTOCOMPLETE
# ----------------
source ~/bin/git-completion.bash
complete -o default -o nospace -F _git_diff gd
complete -o default -o nospace -F _git_log gl
complete -o default -o nospace -F _git_pull gu
complete -o default -o nospace -F _git_checkout gco
complete -o default -o nospace -F _git_branch gb
complete -o default -o nospace -F _git_merge gm
complete -o default -o nospace -F _git_merge gmf
complete -o default -o nospace -F _git_push gp
complete -o default -o nospace -F _git_stash gt
# Nice to have: the output of gbr autocompletes gbt

function get_bg {
  osascript -e "tell application \"Terminal\" to get current settings of first window"
}

function set_bg {
  osascript -e "tell application \"Terminal\" to set background color of first window to $1"
}

function unset_bg {
  osascript -e "tell application \"Terminal\" to set current settings of first window to $*"
}

# ZIP
# ---
function zipr() {
  zip -r $1.zip $1
}
